{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dima/WebstormProjects/24-react-drunkard/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport { cards, finishPage, gamePage, images } from \"../utils/Constants\";\nlet gameCard = [...images];\nshuffleArray(gameCard);\n\nfunction start() {\n  gameCard = [...images];\n  shuffleArray(gameCard);\n}\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nclass Game extends Component {\n  constructor(props, game) {\n    super(props, game);\n\n    this.gameProcess = () => {\n      if (gameCard.length === 0) {\n        start();\n        this.state.game.isWin = this.state.game.countLose < this.state.game.countWin;\n        this.props.gamePage(finishPage, this.state.game);\n      } else {\n        console.log(this.state.game.countLose);\n        console.log(this.state.game.countWin);\n        let hand1 = gameCard.shift();\n        this.setState({\n          hand1: hand1\n        });\n        let hand2 = gameCard.shift();\n        this.setState({\n          hand2: hand2\n        });\n        hand1 > hand2 ? ++this.state.game.countLose : ++this.state.game.countWin;\n      }\n    };\n\n    this.state = {\n      player: props.player,\n      hand1: 'J',\n      hand2: 'J',\n      game: {\n        countLose: props.game.countLose,\n        countWin: props.game.countWin,\n        isWin: props.game.isWin\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"h2Left\",\n        children: \"computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.hand1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.hand2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: this.gameProcess,\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/dima/WebstormProjects/24-react-drunkard/src/components/Game.js"],"names":["React","Component","cards","finishPage","gamePage","images","gameCard","shuffleArray","start","array","i","length","j","Math","floor","random","temp","Game","constructor","props","game","gameProcess","state","isWin","countLose","countWin","console","log","hand1","shift","setState","hand2","player","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {cards, finishPage, gamePage, images} from \"../utils/Constants\";\n\nlet gameCard = [...images];\nshuffleArray(gameCard);\n\nfunction start (){\n    gameCard = [...images]\n    shuffleArray(gameCard);\n}\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nclass Game extends Component {\n    constructor(props, game) {\n        super(props,game);\n        this.state = {\n            player: props.player,\n            hand1: 'J',\n            hand2: 'J',\n            game : {\n                countLose : props.game.countLose,\n                countWin: props.game.countWin,\n                isWin: props.game.isWin\n            }\n\n\n        }\n    }\n\n    gameProcess = () => {\n        if(gameCard.length === 0){\n            start();\n            this.state.game.isWin = this.state.game.countLose < this.state.game.countWin;\n            this.props.gamePage(finishPage,this.state.game);\n        } else {\n            console.log(this.state.game.countLose)\n            console.log(this.state.game.countWin)\n            let hand1 = gameCard.shift();\n            this.setState({hand1: hand1});\n            let hand2 = gameCard.shift()\n            this.setState({hand2: hand2});\n            hand1 > hand2 ? ++this.state.game.countLose : ++this.state.game.countWin;\n\n        }\n    }\n\n\n    render() {\n        return (\n            <div className='container'>\n                <h2 className='h2Left'>computer</h2>\n                <section>\n                    <img src={this.state.hand1}/>\n                    <img src={this.state.hand2}/>\n                </section>\n                <button className='button' onClick={this.gameProcess}>next</button>\n                <h2>{this.state.player}</h2>\n            </div>\n\n        );\n    };\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}